task wrapper(type: Wrapper) {
  gradleVersion = "2.14.1"
}

def javaVersion = JavaVersion.VERSION_1_8

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.ben-manes:gradle-versions-plugin:0.12.0"
  }
}

allprojects {
  repositories {
    mavenCentral()
  }

  apply plugin: "idea"
  apply plugin: "com.github.ben-manes.versions"
}

allprojects {
  apply plugin: "java"
  apply plugin: "maven"
  apply plugin: "signing"

  group = "ru.bozaro.p4"
  version = "0.1.0-SNAPSHOT"

  sourceCompatibility = javaVersion

  ext."signing.secretKeyRingFile" = "${rootProject.projectDir}/secring.gpg"
  ext."signing.keyId" = "4B49488E"
  ext."signing.password" = System.getenv("SIGNING_PASSWORD") ?: ""
  ext.ossrhUsername = System.getenv("OSSRH_USERNAME") ?: ""
  ext.ossrhPassword = System.getenv("OSSRH_PASSWORD") ?: ""

  dependencies {
    compile "org.jetbrains:annotations:15.0"

    testCompile "org.testng:testng:6.9.10"
  }

  idea {
    module {
      jdkName = javaVersion
      downloadJavadoc = true
      downloadSources = true
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  test {
    useTestNG()
    maxHeapSize = "256m"
    ignoreFailures = "$testIgnoreFailures".toBoolean()
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
  }

  javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  if (System.getenv("SIGNING_PASSWORD") != null) {
    signing {
      sign configurations.archives
    }
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        if (System.getenv("SIGNING_PASSWORD") != null) {
          beforeDeployment {
            MavenDeployment deployment -> signing.signPom(deployment)
          }
        }

        if (ossrhUsername == "") {
          repository(url: rootProject.projectDir.toURI().resolve(".maven"))

          snapshotRepository(url: rootProject.projectDir.toURI().resolve(".maven"))
        } else {
          repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }
        }

        pom*.whenConfigured { pom ->
          pom.project {
            name "Java git-lfs library"
            description project.description
          }
        }

        pom.project {
          packaging "jar"
          url "https://github.com/bozaro/p4proto-java"

          scm {
            connection "scm:git:git://github.com/bozaro/p4proto-java.git"
            tag System.getenv("TRAVIS_COMMIT") ?: ""
            url "https://github.com/bozaro/p4proto-java"
          }

          licenses {
            license {
              name "Lesser General Public License, version 3 or greater"
              url "http://www.gnu.org/licenses/lgpl.html"
            }
          }

          developers {
            developer {
              id "bozaro"
              name "Artem V. Navrotskiy"
              email "bozaro@yandex.ru"
            }
          }
        }
      }
    }
  }
}
